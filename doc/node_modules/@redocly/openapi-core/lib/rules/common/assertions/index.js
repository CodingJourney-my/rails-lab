"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Assertions = void 0;
const asserts_1 = require("./asserts");
const utils_1 = require("./utils");
const Assertions = (opts) => {
    const visitors = [];
    // As 'Assertions' has an array of asserts,
    // that array spreads into an 'opts' object on init rules phase here
    // https://github.com/Redocly/redocly-cli/blob/main/packages/core/src/config/config.ts#L311
    // that is why we need to iterate through 'opts' values;
    // before - filter only object 'opts' values
    const assertions = Object.values(opts).filter((opt) => typeof opt === 'object' && opt !== null);
    for (const [index, assertion] of assertions.entries()) {
        const assertId = (assertion.assertionId && `${assertion.assertionId} assertion`) || `assertion #${index + 1}`;
        if (!assertion.subject) {
            throw new Error(`${assertId}: 'subject' is required`);
        }
        const subjects = Array.isArray(assertion.subject)
            ? assertion.subject
            : [assertion.subject];
        const assertsToApply = Object.keys(asserts_1.asserts)
            .filter((assertName) => assertion[assertName] !== undefined)
            .map((assertName) => {
            return {
                name: assertName,
                conditions: assertion[assertName],
                runsOnKeys: asserts_1.runOnKeysSet.has(assertName),
                runsOnValues: asserts_1.runOnValuesSet.has(assertName),
            };
        });
        const shouldRunOnKeys = assertsToApply.find((assert) => assert.runsOnKeys && !assert.runsOnValues);
        const shouldRunOnValues = assertsToApply.find((assert) => assert.runsOnValues && !assert.runsOnKeys);
        if (shouldRunOnValues && !assertion.property) {
            throw new Error(`${shouldRunOnValues.name} can't be used on all keys. Please provide a single property.`);
        }
        if (shouldRunOnKeys && assertion.property) {
            throw new Error(`${shouldRunOnKeys.name} can't be used on a single property. Please use 'property'.`);
        }
        for (const subject of subjects) {
            const subjectVisitor = utils_1.buildSubjectVisitor(assertId, assertion, assertsToApply);
            const visitorObject = utils_1.buildVisitorObject(subject, assertion.context, subjectVisitor);
            visitors.push(visitorObject);
        }
    }
    return visitors;
};
exports.Assertions = Assertions;
